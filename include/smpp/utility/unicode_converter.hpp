// Copyright (c) 2023 Mohammad Nejati
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt)

#pragma once

#include <array>
#include <cinttypes>
#include <string>
#include <string_view>

namespace smpp
{
inline std::string convert_gsm_to_ucs2(std::string_view body)
{
  struct word
  {
    uint8_t h{};
    uint8_t l{};
  };

  static constexpr std::array<word, 128> gsm_03_38_to_ucs2 = {
    { { 0x00, 0x40 }, { 0x00, 0xA3 }, { 0x00, 0x24 }, { 0x00, 0xA5 }, { 0x00, 0xE8 }, { 0x00, 0xE9 }, { 0x00, 0xF9 },
      { 0x00, 0xEC }, { 0x00, 0xF2 }, { 0x00, 0xE7 }, { 0x00, 0x0A }, { 0x00, 0xD8 }, { 0x00, 0xF8 }, { 0x00, 0x0D },
      { 0x00, 0xC5 }, { 0x00, 0xE5 }, { 0x03, 0x94 }, { 0x00, 0x5F }, { 0x03, 0xA6 }, { 0x03, 0x93 }, { 0x03, 0x9B },
      { 0x03, 0xA9 }, { 0x03, 0xA0 }, { 0x03, 0xA8 }, { 0x03, 0xA3 }, { 0x03, 0x98 }, { 0x03, 0x9E }, { 0x00, 0xA0 },
      { 0x00, 0xC6 }, { 0x00, 0xE6 }, { 0x00, 0xDF }, { 0x00, 0xC9 }, { 0x00, 0x20 }, { 0x00, 0x21 }, { 0x00, 0x22 },
      { 0x00, 0x23 }, { 0x00, 0xA4 }, { 0x00, 0x25 }, { 0x00, 0x26 }, { 0x00, 0x27 }, { 0x00, 0x28 }, { 0x00, 0x29 },
      { 0x00, 0x2A }, { 0x00, 0x2B }, { 0x00, 0x2C }, { 0x00, 0x2D }, { 0x00, 0x2E }, { 0x00, 0x2F }, { 0x00, 0x30 },
      { 0x00, 0x31 }, { 0x00, 0x32 }, { 0x00, 0x33 }, { 0x00, 0x34 }, { 0x00, 0x35 }, { 0x00, 0x36 }, { 0x00, 0x37 },
      { 0x00, 0x38 }, { 0x00, 0x39 }, { 0x00, 0x3A }, { 0x00, 0x3B }, { 0x00, 0x3C }, { 0x00, 0x3D }, { 0x00, 0x3E },
      { 0x00, 0x3F }, { 0x00, 0xA1 }, { 0x00, 0x41 }, { 0x00, 0x42 }, { 0x00, 0x43 }, { 0x00, 0x44 }, { 0x00, 0x45 },
      { 0x00, 0x46 }, { 0x00, 0x47 }, { 0x00, 0x48 }, { 0x00, 0x49 }, { 0x00, 0x4A }, { 0x00, 0x4B }, { 0x00, 0x4C },
      { 0x00, 0x4D }, { 0x00, 0x4E }, { 0x00, 0x4F }, { 0x00, 0x50 }, { 0x00, 0x51 }, { 0x00, 0x52 }, { 0x00, 0x53 },
      { 0x00, 0x54 }, { 0x00, 0x55 }, { 0x00, 0x56 }, { 0x00, 0x57 }, { 0x00, 0x58 }, { 0x00, 0x59 }, { 0x00, 0x5A },
      { 0x00, 0xC4 }, { 0x00, 0xD6 }, { 0x00, 0xD1 }, { 0x00, 0xDC }, { 0x00, 0xA7 }, { 0x00, 0xBF }, { 0x00, 0x61 },
      { 0x00, 0x62 }, { 0x00, 0x63 }, { 0x00, 0x64 }, { 0x00, 0x65 }, { 0x00, 0x66 }, { 0x00, 0x67 }, { 0x00, 0x68 },
      { 0x00, 0x69 }, { 0x00, 0x6A }, { 0x00, 0x6B }, { 0x00, 0x6C }, { 0x00, 0x6D }, { 0x00, 0x6E }, { 0x00, 0x6F },
      { 0x00, 0x70 }, { 0x00, 0x71 }, { 0x00, 0x72 }, { 0x00, 0x73 }, { 0x00, 0x74 }, { 0x00, 0x75 }, { 0x00, 0x76 },
      { 0x00, 0x77 }, { 0x00, 0x78 }, { 0x00, 0x79 }, { 0x00, 0x7A }, { 0x00, 0xE4 }, { 0x00, 0xF6 }, { 0x00, 0xF1 },
      { 0x00, 0xFC }, { 0x00, 0xE0 } }
  };

  static constexpr std::array<word, 128> extended_gsm_03_38_to_ucs2 = {
    { { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 },
      { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x0C }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 },
      { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x5E },
      { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 },
      { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 },
      { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x7B }, { 0x00, 0x7D },
      { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x5C }, { 0x00, 0x20 },
      { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 },
      { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x5B }, { 0x00, 0x7E }, { 0x00, 0x5D },
      { 0x00, 0x20 }, { 0x00, 0x7C }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 },
      { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 },
      { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 },
      { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 },
      { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 },
      { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x20, 0xAC }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 },
      { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 },
      { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 },
      { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 }, { 0x00, 0x20 },
      { 0x00, 0x20 }, { 0x00, 0x20 } }
  };

  std::string ucs2;
  bool extended = false;

  for (const auto& septet : body)
  {
    if (static_cast<uint8_t>(septet) > 127)
      continue;

    if (!extended && septet == 0x1B)
    {
      extended = true;
      continue;
    }

    const auto [h, l] = extended ? extended_gsm_03_38_to_ucs2[static_cast<uint8_t>(septet)]
                                 : gsm_03_38_to_ucs2[static_cast<uint8_t>(septet)];
    ucs2.append({ static_cast<char>(h), static_cast<char>(l) });

    extended = false;
  }

  return ucs2;
}

inline std::string convert_ascii_to_ucs2(std::string_view body)
{
  std::string ucs2;

  for (const auto& ch : body)
    ucs2.append({ 0x00, ch });

  return ucs2;
}
} // namespace smpp
